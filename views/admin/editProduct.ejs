<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Eternal chapters: edit product</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <link rel="shortcut icon" href="/img/favicon.png" type="image/x-icon" />
    <link rel="stylesheet" href="admin.css" />

    <!-- cropper -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />

    <style>
      body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #fffbf0;
        height: 100%;
      }

      /* add form */
.form-container {
  max-width: 100%;
  margin: auto;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 0px 20px rgba(0, 0, 0, 0.1);
}
h1 {
  font-size: 24px;
  color: #333;
  text-align: left;
  margin-bottom: 20px;
}
form {
  display: flex;
  flex-direction: column;
}
.form-row {
  display: flex;
  gap: 20px;
  margin-bottom: 15px;
}
.form-group {
  flex: 1;
  display: flex;
  flex-direction: column;
}
label {
  font-size: 14px;
  font-weight: bold;
  margin-bottom: 5px;
  color: #555;
}
input[type="text"],
input[type="number"],
input[type="date"],
select,
textarea {
  padding: 10px;
  font-size: 14px;
  border: 1px solid #d5d5d5;
  border-radius: 5px;
  background-color: #f0f0f0;
}

input[type="file"] {
  padding: 10px;
  font-size: 14px;
  border: 1px solid #d5d5d5;
  border-radius: 5px;
  background-color: #f0f0f0;
  display: block;
  margin-top: 10px;
}
textarea {
  resize: none;
  height: 100px;
  margin-bottom: 14px;
}
button.add-button {
  padding: 10px;
  background-color: #82c341;
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 16px;
  cursor: pointer;
  width: 150px;
  margin: auto;
}
button.add-button:hover {
  background-color: #6daa2b;
}

button {
  margin-top: 10px;
}

@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
  }

  .form-group {
    flex: 1 1 100%;
  }
}
.my-swal-popup {
  background-color: #ffffff; /* Light red background */
  border-radius: 15px; /* Rounded corners */
  border: 2px solid #f5c6cb; /* Border matching the background */
  padding: 25px 35px; /* More padding inside */
  width: 400px; /* Set width */
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Add subtle shadow */
}



.image-upload-container {
  margin-bottom: 30px;
}

.preview-container {
  position: relative;
  width: 100%;
  max-width: 300px;
  margin: 10px 0;
}

.preview {
  width: 100%;
  height: 200px;
  object-fit: cover;
  border: 2px dashed #ccc;
  border-radius: 5px;
  background-color: #f8f9fa;
}

.preview-close {
  position: absolute;
  top: -10px;
  right: -10px;
  width: 24px;
  height: 24px;
  background-color: #dc3545;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  z-index: 5;
}

.preview-close:hover {
  background-color: #c82333;
}

.image-cropper {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 1050; /* Increased z-index to appear above navbar */
  background: white;
  padding: 20px;
  box-shadow: 0 0 20px rgba(0,0,0,0.3);
  border-radius: 8px;
  width: 90%;
  max-width: 800px;
  max-height: 90vh;
  overflow: auto;
}

.image-cropper img {
  max-width: 100%;
  display: block;
  margin: 0 auto;
}


.cropper-actions {
  display: flex;
  gap: 15px;
  margin-top: 20px;
  justify-content: center;
  padding: 10px 0;
  border-top: 1px solid #eee;
}



.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.7);
  z-index: 1040; /* Just below the cropper */
  display: none;
}

.btn-crop,
.btn-cancel {
  padding: 10px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
}

.btn-crop {
  background-color: #82c341;
  color: white;
  border: none;
}

.btn-crop:hover {
  background-color: #6daa2b;
}

.btn-cancel {
  background-color: #dc3545;
  color: white;
  border: none;
}

.btn-cancel:hover {
  background-color: #c82333;
}

.cropper-container {
  max-width: 100% !important;
  max-height: 70vh !important;
}

    </style>
  </head>

  <body>
    <div class="container-fluid holder">
      <!-- Header -->
      <%- include('../../views/partials/admin/header') %>

      <div class="row side">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 sidebar-container vh-100 position-fixed">
          <%- include('../../views/partials/admin/sidebar') %>
        </div>

        <div class="col-md-9 col-lg-10 offset-md-3 offset-lg-2 main-content">
          <!-- form -->
          <div class="form-container">
            <h1 class="fw-bold">Edit Product</h1>
            <form
              action="/admin/edit-product/<%= product._id %>"
              enctype="multipart/form-data"
              method="post"
            >
              <div class="form-row">
                <div class="form-group">
                  <label for="book-title">Book title</label>
                  <input
                    type="text"
                    id="book-title"
                    name="title"
                    value="<%= product.title %>"
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'title'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
                <div class="form-group">
                  <label for="author-name">Author Name</label>
                  <input
                    type="text"
                    id="author-name"
                    name="author_name"
                    value="<%= product.author_name %>"
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'author_name'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="price">Price</label>
                  <input
                    type="number"
                    id="price"
                    name="price"
                    value="<%= product.price %>"
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'price'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
                <div class="form-group">
                  <label for="quantity">Available Quantity</label>
                  <input
                    type="number"
                    id="quantity"
                    name="available_quantity"
                    value="<%= product.available_quantity %>"
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'available_quantity'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="category">Category</label>
                  <select id="category" name="category_id" required>
                    <% category.forEach((cat,index)=>{ %>

                    <option value="<%= cat._id %>"><%= cat.name %></option>

                    <% }) %>
                  </select>

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'category_id'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
                <div class="form-group">
                  <label for="status">Status</label>
                  <select id="status" name="status" required>
                    <option value="active">Active</option>
                    <option value="discontinued">Discontinued</option>
                    <option value="unavailable">Unavailable</option>
                  </select>

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'status'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="publishing-date">Publishing Date</label>
                  <input
                    type="date"
                    id="publishing-date"
                    name="publishing_date"
                    value="<%= product.publishing_date %>"
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'publishing_date'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>


                </div>
                <div class="form-group">
                  <label for="publisher">Publisher</label>
                  <input
                    type="text"
                    id="publisher"
                    name="publisher"
                    value="<%= product.publisher %>"
                    required
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'publisher'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="page">Number of Pages</label>
                  <input
                    type="number"
                    id="page"
                    name="page"
                    value="<%= product.page %>"
                    required
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'page'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
                <div class="form-group">
                  <label for="language">Language</label>
                  <input
                    type="text"
                    id="language"
                    name="language"
                    value="<%= product.language %>"
                    required
                  />

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'language'); %>
                    <% if(error) { %>
                    <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>
              <div class="form-row">
                <!-- image 1 -->
                <div class="form-group">
                  <label for="upload-image1">Upload image 1</label>
                  <div class="image-upload-container">
                    <% if (product.product_imgs && product.product_imgs[0]) { %>
                      <div class="preview-container">
                          <img 
                              src="/uploads/product-images/<%= product.product_imgs[0] %>" 
                              alt="Product Image 1" 
                              id="imgView1" 
                              class="preview" 
                          />
                          <button class="preview-close" onclick="clearPreview(1)">×</button>
                          <input type="hidden" name="existing_images" value="<%= product.product_imgs[0] %>" />
                      </div>
                  <% } else { %>
                      <div class="preview-container">
                          <img src="" alt="" id="imgView1" class="preview" />
                      </div>
                  <% } %>
                      <input type="file" 
                            id="upload-image1" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 1)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>

                <!-- image 2 -->
                <div class="form-group">
                  <label for="upload-image2">Upload image 2</label>
                  <div class="image-upload-container">
                    <% if (product.product_imgs && product.product_imgs[1]) { %>
                      <div class="preview-container">
                          <img 
                              src="/uploads/product-images/<%= product.product_imgs[1] %>" 
                              alt="Product Image 2" 
                              id="imgView2" 
                              class="preview" 
                          />
                          <button class="preview-close" onclick="clearPreview(2)">×</button>
                          <input type="hidden" name="existing_images" value="<%= product.product_imgs[1] %>" />
                      </div>
                  <% } else { %>
                      <div class="preview-container">
                          <img src="" alt="" id="imgView2" class="preview" />
                      </div>
                  <% } %>
                      <input type="file" 
                            id="upload-image2" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 2)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>
              </div> 
              <!-- form row first -->
              <div class="form-row">
                <!-- image 3 -->
                <div class="form-group">
                  <label for="upload-image3">Upload image 3</label>
                  <div class="image-upload-container">
                    <% if (product.product_imgs && product.product_imgs[2]) { %>
                      <div class="preview-container">
                          <img 
                              src="/uploads/product-images/<%= product.product_imgs[2] %>" 
                              alt="Product Image 3" 
                              id="imgView3" 
                              class="preview" 
                          />
                          <button class="preview-close" onclick="clearPreview(3)">×</button>
                          <input type="hidden" name="existing_images" value="<%= product.product_imgs[2] %>" />
                      </div>
                  <% } else { %>
                      <div class="preview-container">
                          <img src="" alt="" id="imgView3" class="preview" />
                      </div>
                  <% } %>
                      <input type="file" 
                            id="upload-image3" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 3)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>

                <!-- iamge 4 -->
                <div class="form-group">
                  <label for="upload-image4">Upload image 4</label>
                  <div class="image-upload-container">
                    <% if (product.product_imgs && product.product_imgs[3]) { %>
                      <div class="preview-container">
                          <img 
                              src="/uploads/product-images/<%= product.product_imgs[3] %>" 
                              alt="Product Image 4" 
                              id="imgView4" 
                              class="preview" 
                          />
                          <button class="preview-close" onclick="clearPreview(4)">×</button>
                          <input type="hidden" name="existing_images" value="<%= product.product_imgs[3] %>" />
                      </div>
                  <% } else { %>
                      <div class="preview-container">
                          <img src="" alt="" id="imgView4" class="preview" />
                      </div>
                  <% } %>
                      <input type="file" 
                            id="upload-image4" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 4)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="description">Description</label>
                  <textarea
                    id="description"
                    name="description"
                    placeholder="Enter description"
                  ></textarea>

                  <% if (typeof validationError !== 'undefined' && validationError) { %>
                    <% const error = validationError.find(err => err.path === 'description'); %>
                    <% if (error) { %>
                      <small class="error" id="error1"> <%= error.msg %> </small>
                    <% } %>
                  <% } %>

                </div>
              </div>
              <button type="submit" class="add-button">Update</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Add this modal backdrop and cropper container outside your form -->
    <div class="modal-backdrop" id="cropperBackdrop"></div>


    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>
      function search() {
        const input = document
          .getElementById("search")
          .value.toLowerCase()
          .trim(); // Get search input and convert to lowercase
        const rows = document.querySelectorAll("#searchData"); // Get all rows to search

        rows.forEach((row) => {
          const cat = row.children[1].textContent.toLowerCase().trim(); // Get user name in the second column (index 1)
          if (cat.includes(input)) {
            row.style.display = ""; // Show row if it matches the search
          } else {
            row.style.display = "none"; // Hide row if it doesn't match
          }
        });
      }

      function clearPreview(index) {
    const input = document.getElementById("upload-image" + index);
    const image = document.getElementById("imgView" + index);
    const closeButton = image.parentElement.querySelector('.preview-close');
    
    // Get the current image filename before clearing
    const currentImage = image.src.split('/').pop();
    
    // Create a hidden input for the deleted image
    const deletedImageInput = document.createElement('input');
    deletedImageInput.type = 'hidden';
    deletedImageInput.name = 'delete_images';
    deletedImageInput.value = currentImage;
    
    // Append to form
    const form = document.querySelector('form');
    form.appendChild(deletedImageInput);

    // Clear the preview
    input.value = '';
    image.src = '';
    if (closeButton) {
        closeButton.remove();
    }
}


      //image cropper functionality
      let currentCropper = null;
      let currentImageIndex = null;

      function viewImage(event, index) {
          const input = event.target;
          if (!input.files || !input.files[0]) return;
          
          const reader = new FileReader();
          currentImageIndex = index;
          
          reader.onload = function() {
              const dataURL = reader.result;
              
              // Show modal backdrop
              const backdrop = document.getElementById('cropperBackdrop');
              backdrop.style.display = 'block';
              
              // Create or get cropper container
              let cropperContainer = document.querySelector('.image-cropper');
              if (!cropperContainer) {
                  cropperContainer = document.createElement('div');
                  cropperContainer.className = 'image-cropper';
                  cropperContainer.innerHTML = `
                      <div style="max-height: 70vh; overflow: auto;">
                          <img src="${dataURL}" id="cropperImage" style="max-width: 100%;">
                      </div>
                      <div class="cropper-actions">
                          <button class="btn-crop" onclick="saveCroppedImage()">Save</button>
                          <button class="btn-cancel" onclick="cancelCropping()">Cancel</button>
                      </div>
                  `;
                  document.body.appendChild(cropperContainer);
              } else {
                  const cropperImage = cropperContainer.querySelector('#cropperImage');
                  cropperImage.src = dataURL;
                  cropperContainer.style.display = 'block';
              }
              
              // Destroy existing cropper if any
              if (currentCropper) {
                  currentCropper.destroy();
              }
              
              // Initialize new cropper
              const cropperImage = document.getElementById('cropperImage');
              currentCropper = new Cropper(cropperImage, {
                  aspectRatio: 2/3,
                  viewMode: 2,
                  guides: true,
                  background: false,
                  autoCropArea: 0.8,
                  zoomable: true,
                  movable: true,
                  cropBoxResizable: true
              });
          };
          
          reader.readAsDataURL(input.files[0]);
      }

      function saveCroppedImage() {
          if (!currentCropper) return;
          
          const canvas = currentCropper.getCroppedCanvas();
          if (!canvas) return;
          
          // Update preview image
          const image = document.getElementById("imgView" + currentImageIndex);
          image.src = canvas.toDataURL("image/jpeg", 0.9);
          
          // Add close button if it doesn't exist
          let closeButton = image.parentElement.querySelector('.preview-close');
          if (!closeButton) {
              closeButton = document.createElement('button');
              closeButton.className = 'preview-close';
              closeButton.innerHTML = '×';
              closeButton.onclick = function(e) {
                  e.preventDefault();
                  clearPreview(currentImageIndex);
              };
              image.parentElement.appendChild(closeButton);
          }
          
          // Convert canvas to blob and update file input
          canvas.toBlob(function(blob) {
              const input = document.getElementById("upload-image" + currentImageIndex);
              const fileName = `cropped-image-${Date.now()}.jpg`;
              const file = new File([blob], fileName, { type: "image/jpeg" });
              
              const dataTransfer = new DataTransfer();
              dataTransfer.items.add(file);
              input.files = dataTransfer.files;
          }, 'image/jpeg', 0.9);
          
          cleanupCropper();
      }

      function cancelCropping() {
          const input = document.getElementById("upload-image" + currentImageIndex);
          input.value = '';
          const image = document.getElementById("imgView" + currentImageIndex);
          image.src = '';
          
          cleanupCropper();
      }

      function cleanupCropper() {
          if (currentCropper) {
              currentCropper.destroy();
              currentCropper = null;
          }
          
          const cropperContainer = document.querySelector('.image-cropper');
          if (cropperContainer) {
              cropperContainer.style.display = 'none';
          }
          
          const backdrop = document.getElementById('cropperBackdrop');
          if (backdrop) {
              backdrop.style.display = 'none';
          }
      }

      // Add event listener for the modal backdrop to cancel cropping when clicked
      document.getElementById('cropperBackdrop').addEventListener('click', function(e) {
          if (e.target === this) {
              cancelCropping();
          }
      });
    </script>
  </body>
</html>