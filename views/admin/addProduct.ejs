<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Customers Dashboard</title>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />

    <link rel="stylesheet" href="admin.css" />
    <link rel="stylesheet" href="/admin/addProduct.css" />
    <link rel="shortcut icon" href="/img/favicon.png" type="image/x-icon" />
    <!-- <link rel="stylesheet" href="/adminProducts.css"> -->

    <!-- cropper -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />
  </head>

  <body>
    <div class="container-fluid holder">
      <!-- Header -->
      <%- include('../../views/partials/admin/header') %>

      <div class="row side">
        <!-- Sidebar -->
        <div class="col-md-3 col-lg-2 sidebar-container vh-100 position-fixed">
          <%- include('../../views/partials/admin/sidebar') %>
        </div>

        <div class="col-md-9 col-lg-10 offset-md-3 offset-lg-2 main-content">
          <!-- form content goes here-->
          <div class="form-container">
            <h1 class="fw-bold">Add Product</h1>
            <form
              action="/admin/add-product"
              enctype="multipart/form-data"
              method="post"
            >
              <div class="form-row">
                <div class="form-group">
                  <label for="book-title">Book title</label>
                  <input
                    type="text"
                    id="book-title"
                    name="title"
                    value="<%= (data.title || '') %>"
                    placeholder="Enter book title"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'title'); %> <% if
                  (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
                <div class="form-group">
                  <label for="author-name">Author Name</label>
                  <input
                    type="text"
                    id="author-name"
                    name="author_name"
                    value="<%= (data.author_name || '') %>"
                    placeholder="Enter author name"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'author_name'); %> <%
                  if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="price">Price</label>
                  <input
                    type="number"
                    id="price"
                    name="price"
                    value="<%= (data.price || '') %>"
                    placeholder="Enter price"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'price'); %> <% if
                  (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
                <div class="form-group">
                  <label for="quantity">Available Quantity</label>
                  <input
                    type="number"
                    id="quantity"
                    name="available_quantity"
                    value="<%= (data.available_quantity || '') %>"
                    placeholder="Enter quantity"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path ===
                  'available_quantity'); %> <% if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="category">Category</label>
                  <select id="category" name="category_id">
                    <% category.forEach((cat,index)=>{ %>

                    <option value="<%= cat._id %>"><%= cat.name %></option>

                    <% }) %>
                  </select>
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'category_id'); %> <%
                  if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
                <div class="form-group">
                  <label for="status">Status</label>
                  <select id="status" name="status">
                    <option value="active">Active</option>
                    <option value="discontinued">Discontinued</option>
                    <option value="unavailable">Unavailable</option>
                  </select>
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'status'); %> <% if
                  (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="publishing-date">Publishing Date</label>
                  <input
                    type="date"
                    id="publishing-date"
                    name="publishing_date"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'publishing_date');
                  %> <% if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
                <div class="form-group">
                  <label for="publisher">Publisher</label>
                  <input
                    type="text"
                    id="publisher"
                    name="publisher"
                    value="<%= (data.publisher || '') %>"
                    placeholder="Enter publisher name"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'publisher'); %> <%
                  if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="page">Number of Pages</label>
                  <input
                    type="number"
                    id="page"
                    name="page"
                    value="<%= (data.page || '') %>"
                    placeholder="Enter number of pages"
                  />
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'page'); %> <% if
                  (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
                <div class="form-group">
                  <label for="language">Language</label>
                  <select id="status" name="language">
                    <option value="malayalam">Malayalam</option>
                    <option value="english">English</option>
                  </select>
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'language'); %> <% if
                  (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>
              <!--  -->
              <div class="form-row">
                <!-- image 1 -->
                <div class="form-group">
                  <label for="upload-image1">Upload image 1</label>
                  <div class="image-upload-container">
                      <div class="preview-container">
                          <img src="" alt="" id="imgView1" class="preview" />
                      </div>
                      <input type="file" 
                            id="upload-image1" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 1)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>

                <!-- image 2 -->
                <div class="form-group">
                  <label for="upload-image2">Upload image 2</label>
                  <div class="image-upload-container">
                      <div class="preview-container">
                          <img src="" alt="" id="imgView2" class="preview" />
                      </div>
                      <input type="file" 
                            id="upload-image2" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 2)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>
              </div> 
              <!-- form row first -->
              <div class="form-row">
                <!-- image 3 -->
                <div class="form-group">
                  <label for="upload-image3">Upload image 3</label>
                  <div class="image-upload-container">
                      <div class="preview-container">
                          <img src="" alt="" id="imgView3" class="preview" />
                      </div>
                      <input type="file" 
                            id="upload-image3" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 3)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>

                <!-- iamge 4 -->
                <div class="form-group">
                  <label for="upload-image4">Upload image 4</label>
                  <div class="image-upload-container">
                      <div class="preview-container">
                          <img src="" alt="" id="imgView4" class="preview" />
                      </div>
                      <input type="file" 
                            id="upload-image4" 
                            name="product_images" 
                            accept="image/png, image/jpeg, image/jpg"
                            onchange="viewImage(event, 4)" />
                      <% if (typeof validationError !== 'undefined' && validationError) { %>
                        <% const error = validationError.find(err => err.path === 'product_images'); %>
                        <% if (error) { %>
                          <small class="error" id="error1"> <%= error.msg %> </small>
                        <% } %>
                      <% } %>
                  </div>
                </div>
              </div>
              <!--  -->
              <div class="form-row">
                <div class="form-group">
                  <label for="description">Description</label>
                  <textarea
                    id="description"
                    name="description"
                    placeholder="Enter description"
                  ></textarea>
                  <% if (typeof validationError !== 'undefined' &&
                  validationError) { %> <% const error =
                  validationError.find(err => err.path === 'description'); %> <%
                  if (error) { %>
                  <small class="error" id="error1"> <%= error.msg %> </small>
                  <% } %> <% } %>
                </div>
              </div>
              <button type="submit" class="add-button">Add</button>
            </form>
          </div>
        </div>
      </div>
    </div>


    <!-- Add this modal backdrop and cropper container outside your form -->
    <div class="modal-backdrop" id="cropperBackdrop"></div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SweetAlert -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <% if (success && success.length > 0) { %>
    <script>
      Swal.fire({
        title: "Success",
        text: "<%= success %>",
        icon: "success",
        showConfirmButton: false,
        timer: 1500,
        customClass: {
          popup: "my-swal-popup", // Custom class for the popup
          title: "my-swal-title", // Custom class for the title
          content: "my-swal-content", // Custom class for the content (text)
          confirmButton: "my-swal-btn", // Custom class for the button
        },
      });
    </script>
    <% } %>

    <!-- Cropper js -->
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>
      function search() {
        const input = document
          .getElementById("search")
          .value.toLowerCase()
          .trim(); // Get search input and convert to lowercase
        const rows = document.querySelectorAll("#searchData"); // Get all rows to search

        rows.forEach((row) => {
          const cat = row.children[1].textContent.toLowerCase().trim(); // Get user name in the second column (index 1)
          if (cat.includes(input)) {
            row.style.display = ""; // Show row if it matches the search
          } else {
            row.style.display = "none"; // Hide row if it doesn't match
          }
        });
      }

      //image cropper functionality

      let currentCropper = null;
let currentImageIndex = null;

function viewImage(event, index) {
    const input = event.target;
    if (!input.files || !input.files[0]) return;
    
    const reader = new FileReader();
    currentImageIndex = index;
    
    reader.onload = function() {
        const dataURL = reader.result;
        
        // Show modal backdrop
        const backdrop = document.getElementById('cropperBackdrop');
        backdrop.style.display = 'block';
        
        // Create or get cropper container
        let cropperContainer = document.querySelector('.image-cropper');
        if (!cropperContainer) {
            cropperContainer = document.createElement('div');
            cropperContainer.className = 'image-cropper';
            cropperContainer.innerHTML = `
                <div style="max-height: 70vh; overflow: auto;">
                    <img src="${dataURL}" id="cropperImage" style="max-width: 100%;">
                </div>
                <div class="cropper-actions">
                    <button class="btn-crop" onclick="saveCroppedImage()">Save</button>
                    <button class="btn-cancel" onclick="cancelCropping()">Cancel</button>
                </div>
            `;
            document.body.appendChild(cropperContainer);
        } else {
            const cropperImage = cropperContainer.querySelector('#cropperImage');
            cropperImage.src = dataURL;
            cropperContainer.style.display = 'block';
        }
        
        // Destroy existing cropper if any
        if (currentCropper) {
            currentCropper.destroy();
        }
        
        // Initialize new cropper
        const cropperImage = document.getElementById('cropperImage');
        currentCropper = new Cropper(cropperImage, {
            aspectRatio: 2/3,
            viewMode: 2,
            guides: true,
            background: false,
            autoCropArea: 0.8,
            zoomable: true,
            movable: true,
            cropBoxResizable: true
        });
    };
    
    reader.readAsDataURL(input.files[0]);
}

function saveCroppedImage() {
    if (!currentCropper) return;
    
    const canvas = currentCropper.getCroppedCanvas();
    if (!canvas) return;
    
    // Update preview image
    const image = document.getElementById("imgView" + currentImageIndex);
    image.src = canvas.toDataURL("image/jpeg", 0.9);
    
    // Add close button if it doesn't exist
    let closeButton = image.parentElement.querySelector('.preview-close');
    if (!closeButton) {
        closeButton = document.createElement('button');
        closeButton.className = 'preview-close';
        closeButton.innerHTML = '×';
        closeButton.onclick = function(e) {
            e.preventDefault();
            clearPreview(currentImageIndex);
        };
        image.parentElement.appendChild(closeButton);
    }
    
    // Convert canvas to blob and update file input
    canvas.toBlob(function(blob) {
        const input = document.getElementById("upload-image" + currentImageIndex);
        const fileName = `cropped-image-${Date.now()}.jpg`;
        const file = new File([blob], fileName, { type: "image/jpeg" });
        
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        input.files = dataTransfer.files;
    }, 'image/jpeg', 0.9);
    
    cleanupCropper();
}

function clearPreview(index) {
    const input = document.getElementById("upload-image" + index);
    const image = document.getElementById("imgView" + index);
    const closeButton = image.parentElement.querySelector('.preview-close');
    
    input.value = '';
    image.src = '';
    if (closeButton) {
        closeButton.remove();
    }
}

function cancelCropping() {
    const input = document.getElementById("upload-image" + currentImageIndex);
    input.value = '';
    const image = document.getElementById("imgView" + currentImageIndex);
    image.src = '';
    
    cleanupCropper();
}

function cleanupCropper() {
    if (currentCropper) {
        currentCropper.destroy();
        currentCropper = null;
    }
    
    const cropperContainer = document.querySelector('.image-cropper');
    if (cropperContainer) {
        cropperContainer.style.display = 'none';
    }
    
    const backdrop = document.getElementById('cropperBackdrop');
    if (backdrop) {
        backdrop.style.display = 'none';
    }
}

// Add event listener for the modal backdrop to cancel cropping when clicked
document.getElementById('cropperBackdrop').addEventListener('click', function(e) {
    if (e.target === this) {
        cancelCropping();
    }
});
    </script>
  </body>
</html>
