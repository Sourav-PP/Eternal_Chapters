<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Eternal chapters: sales report</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="shortcut icon" href="/img/favicon.png" type="image/x-icon" />
  <link rel="stylesheet" href="/admin/adminDashboard.css">
  <link rel="stylesheet" href="/admin/admin.css">

  <style>
    body {
      background-color: #fdf8ec;
    }
    .card {
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      background-color: #fff;
    }
    .status-completed {
      color: green;
    }
    .status-processing {
      color: orange;
    }
    .status-rejected {
      color: red;
    }
    .card {
        border: 3px solid rgb(227, 207, 156);
    }
    .table td {
        vertical-align: middle;
        word-wrap: break-word;
        max-width: 300px; /* Adjust this value based on your needs */
    }
    
    .text-wrap {
        white-space: normal !important;
        word-break: break-word;
    }
    
    .list-unstyled li {
        padding: 2px 0;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        font-size: 1.2em;
    }
  </style>

</head>
<body>
  <div class="container-fluid holder">

    <!-- Header -->
    <%- include('../../views/partials/admin/header') %>

    <div class="row side">
      <!-- Sidebar -->
      <div class="col-md-3 col-lg-2 sidebar-container vh-100 position-fixed">
        <%- include('../../views/partials/admin/sidebar') %>
      </div>
  
      <!-- Main Content -->
      <div class="col-md-9 col-lg-10 offset-md-3 offset-lg-2 main-content">
        <!-- content goes here -->
        <div class="container my-5">
            <h1 class="text-center mb-4 fw-bold">Sales Report</h1>
    
            <!-- Stats Cards -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card text-white bg-white mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Total Users</h5>
                            <p class="card-text fs-4"><%= totalUsers %></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card text-white bg-white mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Total Orders</h5>
                            <p class="card-text fs-4"><%= totalOrders %></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card text-white bg-white mb-3">
                        <div class="card-body">
                            <h5 class="card-title">Total Sales</h5>
                            <p class="card-text fs-4">â‚¹<%= totalSales.toFixed(2) %></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- filter -->
            <div class="filter-container">
              <div class="row">
                  
                <div class="col-md-2">
                  <label for="monthFilter" class="form-label">Month</label>
                  <select id="monthFilter" class="form-select">
                    <option value="">All Months</option>
                    <% for(let i = 1; i <= 12; i++) { %>
                      <option value="<%= i %>" <%= parseInt(selectedMonth) === i ? 'selected' : '' %>>
                        <%= new Date(0, i-1).toLocaleString('default', { month: 'long' }) %>
                      </option>
                    <% } %>
                  </select>
                </div>
                <div class="col-md-2">
                  <label for="yearFilter" class="form-label">Year</label>
                  <select id="yearFilter" class="form-select">
                    <option value="">All Years</option>
                    <% const currentYear = new Date().getFullYear(); %>
                    <% for(let year = currentYear; year >= currentYear - 5; year--) { %>
                      <option value="<%= year %>" <%= parseInt(selectedYear) === year ? 'selected' : '' %>>
                        <%= year %>
                      </option>
                    <% } %>
                  </select>
                </div>
                <div class="col-md-2">
                  <label for="fromDate" class="form-label">From Date</label>
                  <input type="date" id="fromDate" class="form-control" value="<%= fromDate || '' %>">
                </div>
                <div class="col-md-2">
                  <label for="toDate" class="form-label">To Date</label>
                  <input type="date" id="toDate" class="form-control" value="<%= toDate || '' %>">
                </div>
                <div class="col-md-2 align-self-end">
                  <button class="btn btn-info w-100" id="today">Today</button>
                </div>
                <div class="col-md-2 align-self-end">
                  <button class="btn btn-warning w-100" id="weekly">This Week</button>
                </div>
                <div class="col-md-2 align-self-end mt-3 mb-3">
                  <button class="btn btn-primary w-100" id="applyFilters">Apply Filters</button>
                </div>
                <div class="col-md-2 align-self-end mt-3 mb-3">
                  <button class="btn btn-secondary w-100" id="removeFilters">Remove Filters</button>
                </div>
              </div>
            </div>
    
              <!-- Export Buttons -->
              <div class="row mb-4 mt-3">
                <div class="col-md-3">
                  <button class="btn btn-success w-100" id="downloadExcel">Download Excel</button>
                </div>
                <div class="col-md-3">
                  <button class="btn btn-danger w-100" id="downloadPDF">Download PDF</button>
                </div>
              </div>

            <!-- Sales Table -->
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="salesTable">
                    <thead class="table-dark">
                        <tr>
                          <th>SI</th>
                          <th>Order Date</th>
                          <th>Customer</th>
                          <th style="min-width: 200px;">Products</th>
                          <th>Quantity</th>
                          <th>Total Amount</th>
                          <th>Discount</th>
                          <th>Net Amount</th>
                          <th>Status</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if (salesReport.length === 0) { %>
                          <tr>
                            <td colspan="9" class="text-center">No records found</td>
                          </tr>
                        <% } else { %>
                          <% salesReport.forEach((data, index) => { %>
                            <tr>
                              <td><%= (currentPage-1) * itemsPerPage + (index + 1) %></td>
                              <td><%= new Date(data.order_date).toLocaleDateString() %></td>
                              <td><%= data.user.first_name %></td>
                              <td>
                                <ul class="list-unstyled mb-0">
                                    <% data.productDetails.forEach(product => { %>
                                        <li class="text-wrap mb-1"><%= product.title %></li>
                                    <% }); %>
                                </ul>
                              </td>
                              <td>
                                <ul class="list-unstyled mb-0">
                                  <% if (data.orderItems && data.orderItems.items) { %>
                                    <% data.orderItems.items.forEach(item => { %>
                                      <li class="mb-1"><%= item.quantity %> pcs</li>
                                    <% }); %>
                                  <% } else { %>
                                    <li class="mb-1">No items available</li>
                                  <% } %>
                                </ul>
                              </td>
                              <td><%= data.total.toFixed(2) %></td>
                              <td><%= data.discount.toFixed(2) %></td>
                              <td><%= data.netAmount.toFixed(2) %></td>
                              <td>
                                <ul class="list-unstyled mb-0">
                                  <% if (data.orderItems && data.orderItems.items) { %>
                                    <% data.orderItems.items.forEach(item => { %>
                                      <li class="mb-1"><%= item.status %></li>
                                    <% }); %>
                                  <% } else { %>
                                    <li class="mb-1">No items available</li>
                                  <% } %>
                                </ul>
                              </td>
                            </tr>
                          <% }); %>
                        <% } %>
                      </tbody>
                </table>
            </div>
            
            <nav aria-label="Page navigation example">
              <ul class="pagination justify-content-center">
                <!-- Previous Page Button -->
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage - 1 %>&fromDate=<%= fromDate || '' %>&toDate=<%= toDate || '' %>&month=<%= selectedMonth || '' %>&year=<%= selectedYear || '' %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
            
                <!-- Dynamic Page Numbers -->
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>&fromDate=<%= fromDate || '' %>&toDate=<%= toDate || '' %>&month=<%= selectedMonth || '' %>&year=<%= selectedYear || '' %>"><%= i %></a>
                  </li>
                <% } %>
            
                <!-- Next Page Button -->
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage + 1 %>&fromDate=<%= fromDate || '' %>&toDate=<%= toDate || '' %>&month=<%= selectedMonth || '' %>&year=<%= selectedYear || '' %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              </ul>
            </nav>

        </div>
      </div>
    </div>
  </div>
  
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

  <script>
    $(document).ready(function () {
      // Apply Filters
      $('#applyFilters').on('click', function () {
        // const status = $('#statusFilter').val();
        const month = $('#monthFilter').val();
        const year = $('#yearFilter').val();
        const fromDate = $('#fromDate').val();
        const toDate = $('#toDate').val();
        // Reload the page with filter parameters
        const queryParams = new URLSearchParams({
            // status,
            month, 
            year,
            fromDate,
            toDate
        }).toString();
        window.location.href = `/admin/sales-report?${queryParams}`;
      });

      $('#removeFilters').on('click', function () {
        // Clear filter inputs
        $('#monthFilter').val('');
        $('#yearFilter').val('');
        $('#fromDate').val('');
        $('#toDate').val('');

        // Reload the page without query parameters
        window.location.href = '/admin/sales-report';
      });

      $('#today').on('click', function() {
        const today = new Date()
        const tomorrow = new Date()
        tomorrow.setDate(today.getDate() + 1)
        
        $('#fromDate').val(today.toISOString().split('T')[0])
        $('#toDate').val(tomorrow.toISOString().split('T')[0])
        $('#applyFilters').click()
      })

      $('#weekly').on('click', function() {
        const today = new Date()
        const tomorrow = new Date()
        tomorrow.setDate(today.getDate() + 1)
        const dayOfWeek = today.getDay()
        const startOfWeek = new Date(today)
        startOfWeek.setDate(today.getDate() - dayOfWeek)
        const formattedStartOfWeek = startOfWeek.toISOString().split('T')[0]
        const formattedToday = today.toISOString().split('T')[0]
        
        $('#fromDate').val(formattedStartOfWeek)
        $('#toDate').val(tomorrow.toISOString().split('T')[0])
        $('#applyFilter').click()
      })


      // Export to Excel
      

      // Main Excel Export Function
      function getMonthName(monthNumber) {
          const months = [
              'January', 'February', 'March', 'April', 'May', 'June',
              'July', 'August', 'September', 'October', 'November', 'December'
          ];
          return months[parseInt(monthNumber) - 1] || monthNumber;
      }

      function getSummaryPeriod() {
          const urlParams = new URLSearchParams(window.location.search);
          const fromDate = urlParams.get('fromDate');
          const toDate = urlParams.get('toDate');
          const month = urlParams.get('month');
          const year = urlParams.get('year');

          if (fromDate && toDate) {
              return `${fromDate} to ${toDate}`;
          } else if (month && year) {
              return `${getMonthName(month)} ${year}`;
          } else if (month) {
              return `${getMonthName(month)}`;
          } else if (year) {
              return `Year ${year}`;
          }
          return 'All Time';
      }

      function formatCurrency(amount) {
          return new Intl.NumberFormat('en-IN', {
              style: 'currency',
              currency: 'INR',
              minimumFractionDigits: 2,
              maximumFractionDigits: 2
          }).format(amount);
      }

      // Main Excel Export Function
      document.getElementById('downloadExcel').addEventListener('click', async function () {
          try {
              // Check if XLSX library is loaded
              if (typeof XLSX === 'undefined' || !XLSX.utils.aoa_to_sheet) {
                  throw new Error('XLSX library not properly loaded. Please ensure you are using the xlsx-style library.');
              }

              const response = await fetch('/admin/all-sales', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      fromDate: new URLSearchParams(window.location.search).get('fromDate'),
                      toDate: new URLSearchParams(window.location.search).get('toDate'),
                      month: new URLSearchParams(window.location.search).get('month'),
                      year: new URLSearchParams(window.location.search).get('year')
                  })
              });

              if (!response.ok) {
                  throw new Error('Failed to fetch sales data');
              }

              const responseData = await response.json();
              const salesData = responseData.data;

              // Create workbook
              const workbook = {
                  SheetNames: ['Sales Data', 'Summary'],
                  Sheets: {}
              };

              // Create Sales Data worksheet
              const wsData = [];

              // Add title
              wsData.push(['DETAILED SALES REPORT']);
              wsData.push([`Report Period: ${getSummaryPeriod()}`]);
              wsData.push([]); // Empty row

              // Add headers
              wsData.push([
                  'SI No',
                  'Order Date',
                  'Customer',
                  'Products',
                  'Quantity',
                  'Total Amount (â‚¹)',
                  'Discount (â‚¹)',
                  'Net Amount (â‚¹)',
                  'Status'
              ]);

              // Add data
              salesData.forEach((order, index) => {
                  const productNames = order.products.join(', ');
                  const quantities = order.orderItems.items.map(item => item.quantity).join(', ');
                  wsData.push([
                      index + 1,
                      order.orderDate,
                      order.customer,
                      productNames,
                      quantities,
                      order.totalAmount,  // Use raw numbers for better formatting
                      order.discount,     // Use raw numbers for better formatting
                      order.netAmount,    // Use raw numbers for better formatting
                      order.status.join(', ')
                  ]);
              });

              // Convert data to worksheet
              const ws = XLSX.utils.aoa_to_sheet(wsData);

              // Define base styles
              const baseStyle = {
                  font: { name: 'Arial', sz: 10 },
                  alignment: { horizontal: 'left', vertical: 'center', wrapText: true },
                  border: {
                      top: { style: 'thin' },
                      bottom: { style: 'thin' },
                      left: { style: 'thin' },
                      right: { style: 'thin' }
                  }
              };

              // Header style
              const headerStyle = {
                  ...baseStyle,
                  font: { ...baseStyle.font, bold: true, color: { rgb: "FFFFFF" } },
                  fill: { fgColor: { rgb: "4472C4" } }
              };

              // Title style
              const titleStyle = {
                  font: { bold: true, sz: 14 },
                  alignment: { horizontal: 'center' }
              };

              // Currency style
              const currencyStyle = {
                  ...baseStyle,
                  numFmt: 'â‚¹#,##0.00'
              };

              // Apply styles to all cells
              const range = XLSX.utils.decode_range(ws['!ref']);
              for (let R = range.s.r; R <= range.e.r; R++) {
                  for (let C = range.s.c; C <= range.e.c; C++) {
                      const cell = XLSX.utils.encode_cell({ r: R, c: C });
                      if (!ws[cell]) continue;

                      // Apply different styles based on row/column
                      if (R === 0) {
                          ws[cell].s = titleStyle;
                      } else if (R === 3) {
                          ws[cell].s = headerStyle;
                      } else if (R > 3 && (C === 5 || C === 6 || C === 7)) {
                          // Apply currency style to amount columns
                          ws[cell].s = currencyStyle;
                      } else {
                          ws[cell].s = baseStyle;
                      }
                  }
              }

              // Set column widths
              ws['!cols'] = [
                  { wch: 8 },    // SI No
                  { wch: 15 },   // Order Date
                  { wch: 30 },   // Customer
                  { wch: 35 },   // Products
                  { wch: 10 },   // Quantity
                  { wch: 15 },   // Total Amount
                  { wch: 15 },   // Discount
                  { wch: 15 },   // Net Amount
                  { wch: 16 }    // Status
              ];

              // Set merged cells
              ws['!merges'] = [
                  { s: { r: 0, c: 0 }, e: { r: 0, c: 8 } },  // Title
                  { s: { r: 1, c: 0 }, e: { r: 1, c: 8 } }   // Period
              ];

              // Add Sales Data worksheet to workbook
              workbook.Sheets['Sales Data'] = ws;

              // Create Summary worksheet with similar styling
              const summaryData = [
                  ['SALES REPORT SUMMARY'],
                  [],
                  ['Report Details'],
                  ['Report Period:', getSummaryPeriod()],
                  ['Generated On:', new Date().toLocaleString()],
                  [],
                  ['Sales Summary'],
                  ['Total Orders:', salesData.length],
                  ['Total Amount:', salesData.reduce((sum, order) => sum + order.totalAmount, 0)],
                  ['Total Discount:', salesData.reduce((sum, order) => sum + order.discount, 0)],
                  ['Net Amount:', salesData.reduce((sum, order) => sum + order.netAmount, 0)]
              ];

              const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);

              // Apply summary styles
              const summaryRange = XLSX.utils.decode_range(summaryWs['!ref']);
              for (let R = summaryRange.s.r; R <= summaryRange.e.r; R++) {
                  for (let C = summaryRange.s.c; C <= summaryRange.e.c; C++) {
                      const cell = XLSX.utils.encode_cell({ r: R, c: C });
                      if (!summaryWs[cell]) continue;

                      if (R === 0) {
                          summaryWs[cell].s = titleStyle;
                      } else if (C === 1 && (R === 8 || R === 9 || R === 10)) {
                          summaryWs[cell].s = currencyStyle;
                      } else {
                          summaryWs[cell].s = baseStyle;
                      }
                  }
              }

              summaryWs['!cols'] = [{ wch: 25 }, { wch: 30 }];
              summaryWs['!merges'] = [
                  { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } }
              ];

              // Add Summary worksheet to workbook
              workbook.Sheets['Summary'] = summaryWs;

              // Save the file
              const currentDate = new Date().toISOString().split('T')[0];
              XLSX.writeFile(workbook, `Sales_Report_${currentDate}.xlsx`);

          } catch (error) {
              console.error('Error downloading Excel:', error);
              alert('Error downloading Excel. Please try again.');
          }
      });

      // Export to PDF
      $('#downloadPDF').on('click', async function () {
        const loadingDiv = $('<div>').addClass('loading-overlay').text('Generating PDF...')
        $('body').append(loadingDiv)

        try {
            const response = await fetch('/admin/all-sales', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    fromDate: new URLSearchParams(window.location.search).get('fromDate'),
                    toDate: new URLSearchParams(window.location.search).get('toDate'),
                    month: new URLSearchParams(window.location.search).get('month'),
                    year: new URLSearchParams(window.location.search).get('year')
                })
            })

            if (!response.ok) {
                throw new Error('Failed to fetch data')
            }

            const responseData = await response.json()
            const allData = responseData.data

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('landscape'); // Use landscape mode for better readability

            // Create a title with filter information
            let title = 'Comprehensive Sales Report';
            const urlParams = new URLSearchParams(window.location.search);
            const fromDate = urlParams.get('fromDate');
            const toDate = urlParams.get('toDate');
            const month = urlParams.get('month');
            const year = urlParams.get('year');

            if (fromDate && toDate) {
                title += ` (From ${fromDate} to ${toDate})`;
            } else if (month && year) {
                title += ` (Month: ${month}, Year: ${year})`;
            } else if (month) {
                title += ` (Month: ${month})`;
            } else if (year) {
                title += ` (Year: ${year})`;
            } else if (window.location.search) {
                title += ` (Filtered)`;
            }

            // Add title with larger, bold font
            doc.setFontSize(16);
            doc.setFont('helvetica', 'bold');
            doc.text(title, doc.internal.pageSize.width / 2, 15, { align: 'center' });
            doc.setFontSize(10);
            doc.setFont('helvetica', 'normal');

            // Prepare data with expanded product details
            const prepareTableData = (data) => {
                const expandedData = [];

                data.forEach((order, index) => {
                    // Fetch the full order details including all products
                    const baseRow = {
                        si: index + 1,
                        orderDate: order.orderDate,
                        customer: order.customer,
                        totalAmount: order.totalAmount,
                        discount: order.discount,
                        netAmount: order.netAmount,
                        product: order.producs,
                        status: order.status
                    };

                    // Handle multiple products in an order
                    if (order.orderItems && order.orderItems.items && order.orderItems.items.length > 0) {
                        order.orderItems.items.forEach((item, itemIndex) => {
                            const productRow = {
                                ...baseRow,
                                product: order.products,
                                quantity: item.quantity || 1
                            };
                            expandedData.push(productRow);
                        });
                    } else {
                        // If no specific items, use the base order information
                        expandedData.push({
                            ...baseRow,
                            product: order.products,
                            quantity: 1
                        });
                    }
                });

                return expandedData;
            };

            // Prepare table data with expanded product details
            const tableData = prepareTableData(allData);

            // Define column widths and styles
            const columnWidths = {
                0: 10,   // SI
                1: 40,   // Order Date
                2: 47,   // Customer
                3: 50,   // Products
                4: 20,   // Quantity
                5: 30,   // Total Amount
                6: 22,   // Discount
                7: 30,   // Net Amount
                8: 15    // Status
            };

            // Generate PDF table
            doc.autoTable({
                body: tableData.map(row => [
                    row.si.toString(),
                    row.orderDate,
                    row.customer,
                    row.product,
                    row.quantity.toString(),
                    row.totalAmount.toFixed(2),
                    row.discount.toFixed(2),
                    row.netAmount.toFixed(2),
                    row.status
                ]),
                columns: [
                    { header: 'SI', dataKey: 0 },
                    { header: 'Order Date', dataKey: 1 },
                    { header: 'Customer', dataKey: 2 },
                    { header: 'Product', dataKey: 3 },
                    { header: 'Quantity', dataKey: 4 },
                    { header: 'Total Amount', dataKey: 5 },
                    { header: 'Discount', dataKey: 6 },
                    { header: 'Net Amount', dataKey: 7 },
                    { header: 'Status', dataKey: 8 }
                ],
                startY: 25,
                styles: {
                    fontSize: 8,
                    cellPadding: 2,
                    overflow: 'linebreak',
                    halign: 'left',
                    valign: 'middle',
                    lineWidth: 0.1,
                    lineColor: [0, 0, 0]
                },
                columnStyles: {
                    0: { cellWidth: columnWidths[0], halign: 'center' },  // SI
                    1: { cellWidth: columnWidths[1] },  // Order Date
                    2: { cellWidth: columnWidths[2] },  // Customer
                    3: { 
                        cellWidth: columnWidths[3],
                        overflow: 'linebreak',
                        cellPadding: {top: 2, right: 2, bottom: 2, left: 2}
                    },  // Products
                    4: { cellWidth: columnWidths[4], halign: 'center' },  // Quantity
                    5: { cellWidth: columnWidths[5], halign: 'right' },   // Total Amount
                    6: { cellWidth: columnWidths[6], halign: 'right' },   // Discount
                    7: { cellWidth: columnWidths[7], halign: 'right' },   // Net Amount
                    8: { cellWidth: columnWidths[8], halign: 'center' }   // Status
                },
                headStyles: {
                    fontSize: 9,
                    fillColor: [51, 51, 51],
                    textColor: 255,
                    halign: 'center',
                    valign: 'middle'
                },
                margin: { top: 25, right: 10, bottom: 15, left: 10 },
                pageBreak: 'auto',
                showHead: 'everyPage'
            });

            // Add summary at the end
            const totalOrders = allData.length;
            const totalAmount = allData.reduce((sum, row) => sum + row.netAmount, 0);
            const totalDiscount = allData.reduce((sum, row) => sum + row.discount, 0);
            
            const finalY = doc.lastAutoTable.finalY || doc.internal.pageSize.height - 20;
            
            // Style for summary
            doc.setFontSize(10);
            doc.setFont('helvetica', 'bold');
            doc.text('Summary:', 14, finalY + 10);
            
            doc.setFont('helvetica', 'normal');
            doc.text(`Total Orders: ${totalOrders}`, 14, finalY + 20);
            doc.text(`Total Amount: ${totalAmount.toFixed(2)}`, 14, finalY + 30);
            doc.text(`Total Discount: ${totalDiscount.toFixed(2)}`, 14, finalY + 40);

            // Save the PDF
            doc.save('Detailed_Sales_Report.pdf');

        } catch (error) {
            console.error('Error generating PDF:', error);
            alert('Error generating PDF. Please try again.');
        } finally {
            $('.loading-overlay').remove();
        }
    });
    });
  </script>
</body>
</html>
