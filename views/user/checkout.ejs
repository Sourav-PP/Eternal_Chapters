<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Eternal Chapters: checkout</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>

    <link rel="stylesheet" href="userDetails.css" />
    <link rel="stylesheet" href="cart.css" />
    <link rel="stylesheet" href="user/header.css" />
    <link rel="stylesheet" href="user/checkout.css" />
    <link rel="shortcut icon" href="img/favicon.png" type="image/x-icon" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
    <style>
        .success-message {
            color: green;
        }
        .dis {
            float: right !important;
            color: green;
        }
        
    </style>
</head>
<body>
    <%- include('../../views/partials/user/detailsHeader') %>

    <div class="d-flex main containers">
        <div class="main-content container mt-5 cart-container">
            <h4 class="mb-4 ms-2">Select delivery address</h4>

            <div id="notification" style="display: none"></div>

            <!-- Form for Address and Payment -->
            <form id="checkout-form" action="/place-order" method="POST">
                <div class="row item-card">
                    <!-- Left Section: Address list -->
                    <div class="col-md-8">
                        <div class="add-div">
                            <% if (addresses && addresses.length > 0) { %>
                                <% addresses.forEach(address => { %>
                                    <div class="row align-items-center mb-3 address-card">
                                        <div class="col-12">
                                            <label class="form-check-label d-flex align-items-center position-relative">
                                                <input type="radio" name="addressId" class="form-check-input me-2 add-radio" value="<%= address.id %>" />
                                                <div class="address">
                                                    <h5><%= address.name %></h5>
                                                    <h6><%= address.city %></h6>
                                                    <p><%= address.state %></p>
                                                    <p class="text-success fw-bold"><%= address.address_type %></p>
                                                </div>
                                            </label>
                                        </div>
                                    </div>
                                    <% }) %>
                            <% } else { %>
                                <p class="text-danger mt-5 fs-5 mb-0">No address found!</p>
                                <p>Please add an address to continue.</p>
                            <% } %>
                            
                        </div>
                        <a class="text-decoration-none text-dark btn btn-primary mt-3 text-white" href="/addAddress?from=checkout&productId=<%= productId %>&quantity=<%= quantityForBuyNow %>">Add address</a>

                        <!-- coupon section -->
                        <div class="coupon-section mt-4 bg">
                            <h4 class="mb-3">Apply Coupon</h4>
                            <!-- <input type="text" id="coupon-code" class="form-control" placeholder="Enter coupon code" /> -->
                             <select name="" id="coupon-code" class="form-control" style="width: 300px; border-radius: 20px;">
                                <option value="" disabled selected>Select a Coupon</option>
                                <% coupons.forEach(item => { %>
                                    <option value="<%= item.code %>"><%= item.code %></option>
                                <% }) %>
                                
                             </select>
                             <input type="hidden" id="product-id" name="productId" value="<%= productId %>">
                             <input type="hidden" id="quantity" name="quantity" value="<%= quantityForBuyNow %>">
                             <input type="hidden" name="retryOrderId" id="retry-order-id" value="<%= retryOrderId %>">
                            <button type="button" id="apply-coupon" class="btn btn-success mt-2">Apply Coupon</button>
                            <button type="button" id="remove-coupon" class="btn btn-danger mt-2" style="display: none;">Remove Coupon</button>
                            <div id="coupon-message" class="mt-2 text-danger"></div>
                        </div>

                        <!-- Payment Methods Section -->
                        <div class="payment-methods mt-4">
                            <h4 class="mb-3">Payment Methods</h4>
                            <p>Select any payment method</p>
                            <div>
                                <label class="form-check">
                                    <input type="radio" name="paymentMethod" value="creditCard" class="form-check-input" /> Debit Card / Credit Card
                                </label>
                                <label class="form-check mt-2">
                                    <input type="radio" name="paymentMethod" value="bank" class="form-check-input" /> Bank
                                </label>
                                <label class="form-check mt-2">
                                    <input type="radio" name="paymentMethod" value="upi" class="form-check-input" /> UPI Method
                                </label>
                                <label class="form-check mt-2">
                                    <input type="radio" name="paymentMethod" value="COD" class="form-check-input" /> Cash on Delivery
                                    <input type="hidden" name="razorpayPaymentId" id="payment_id"/>
                                </label>
                                
                                <% if (false) { %>
                                    <input type="hidden" name="productId" value="<%= cart.items[0].product_id._id %>" />
                                <% } %>

                            </div>
                        </div>
                    </div>

                    <!-- Right Section: Price Details -->
                    <div class="col-md-4 price-holder">
                        <div class="price-details">
                            <h5>PRICE DETAILS</h5>
                            <p>Price ( <%= numberOfItems %> Items ) <span class="float-end original-price">&#8377;<%= originalPrice.toFixed(2)  %></span></p>
                            <p>Tax Amount <span class="float-end tax-amount">&#8377;<%= taxAmount.toFixed(2) %></span></p>
                            <p>Delivery Charges <span class="float-end delivery-charge">&#8377;<%= shippingCharge.toFixed(2)  %></span></p>
                            <p>Offer Discount <span class="float-end text-success offer-discount">-&#8377;<%= offerDiscount.toFixed(2) %></span></p>
                            <p id="discount-holder">Coupon Discount <span id="discount" class="coupon-discount"></span></p>
                            <hr />
                            <p class="fw-bold">Total Amount <span class="float-end total">&#8377;<%= netAmount.toFixed(2) %></span></p>
                            <button type="submit" class="btn-checkout w-100 mt-3">Place Order</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Footer -->
    <%- include('../../views/partials/user/detailsFooter') %>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addressRadio = document.querySelectorAll('input[name="addressId"]');
            addressRadio.forEach(radio => {
                radio.addEventListener('change',async function () {
                    const addressId = this.value;
                    await updateDeliveryCharges(addressId)
                })
            })
        })

        async function updateDeliveryCharges(addressId) {
            try {
    
                const response = await fetch('/get-delivery-charges', {
                    method: 'POST',
                    headers: {'Content-Type' : 'application/json'},
                    body: JSON.stringify({
                        addressId: addressId
                    })
                })

                if(!response.ok) {
                    throw new Error('Failed to fetch delivery charges')
                }

                const data = await response.json()
                if(data.success) {
                    updatePriceDetails(data.deliveryCharge)
                } else {
                    console.error('Failed to update delivery charges',data.message)
                }
            } catch (error) {
                console.error('Error updating delivery charges', error)
            }
        }

        function updatePriceDetails(deliveryCharges) {

            const deliveryChargesElement = document.querySelector('.delivery-charge');
            const totalAmountElement = document.querySelector('.total');
            const originalPrice = parseFloat(document.querySelector('.original-price').textContent.replace('â‚¹', '').replace(',', '').trim());
            const taxAmount = parseFloat(document.querySelector('.tax-amount').textContent.replace('â‚¹', '').replace(',', '').trim());
            const offerDiscount = parseFloat(document.querySelector('.offer-discount').textContent.replace('â‚¹', '').replace(',', '').replace('-', '').trim());
            const couponDiscount = parseFloat(document.querySelector('.coupon-discount').textContent.replace('â‚¹', '').replace(',', '').trim()) || 0;
            

            deliveryChargesElement.textContent = `â‚¹${deliveryCharges.toFixed(2)}`;
            const netAmount = originalPrice + taxAmount + deliveryCharges - offerDiscount - couponDiscount;
            totalAmountElement.textContent = `â‚¹${netAmount.toFixed(2)}`;
        }


        document.querySelector('#checkout-form').addEventListener('submit', async function (e) {
            e.preventDefault();
            console.log('event has been prevented');

            // Check if an address is selected
            const selectedAddress = document.querySelector('input[name="addressId"]:checked');
            if (!selectedAddress) {
                Swal.fire({
                    title: "Missing Address!",
                    text: "Please select a delivery address before proceeding.",
                    icon: "warning",
                    showConfirmButton: true,
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#ff9800", // Stylish orange button
                    allowOutsideClick: false, // Prevents closing when clicking outside
                    allowEscapeKey: false, // Prevents closing with the Escape key
                    customClass: {
                        popup: "my-swal-popup",
                        title: "my-swal-title",
                        content: "my-swal-content",
                        confirmButton: "my-swal-btn",
                    },
                    didOpen: () => {
                        const popup = Swal.getPopup();
                        popup.style.borderRadius = "12px"; // Smooth rounded corners
                        popup.style.boxShadow = "0 0 10px rgba(255, 165, 0, 0.3)"; // Soft glow effect
                    }
                });
                return;
            }


            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')
            if(!selectedPaymentMethod) {
                Swal.fire({
                    title: "Missing Payment!",
                    text: "Please select a payment method before proceeding.",
                    icon: "warning",
                    showConfirmButton: true,
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#ff9800", // Stylish orange button
                    allowOutsideClick: false, // Prevents closing when clicking outside
                    allowEscapeKey: false, // Prevents closing with the Escape key
                    customClass: {
                        popup: "my-swal-popup",
                        title: "my-swal-title",
                        content: "my-swal-content",
                        confirmButton: "my-swal-btn",
                    },
                    didOpen: () => {
                        const popup = Swal.getPopup();
                        popup.style.borderRadius = "15px"; 
                        popup.style.boxShadow = "0 0 10px rgba(255, 165, 0, 0.3)"; 
                    }
                });
                return;
            }

            const productId = document.getElementById('product-id').value
            const amountElement = document.querySelector('.total');
            const amount = parseFloat(amountElement.textContent.replace('â‚¹', '').replace(',', '').trim());

            // Ensure amount is valid
            if (isNaN(amount) || amount <= 0) {
                Swal.fire({
                    title: "Error!",
                    text: "Invalid amount format.",
                    icon: "error",
                    showConfirmButton: true,
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#d32f2f", // Deep red for error confirmation button
                    allowOutsideClick: false, // Prevents closing when clicking outside
                    allowEscapeKey: false, // Prevents closing with the Escape key
                    customClass: {
                        popup: "my-swal-popup",
                        title: "my-swal-title",
                        content: "my-swal-content",
                        confirmButton: "my-swal-btn",
                    },
                    didOpen: () => {
                        const popup = Swal.getPopup();
                        popup.style.borderRadius = "15px"; // Smooth rounded corners
                        popup.style.boxShadow = "0 0 15px rgba(211, 47, 47, 0.5)"; // Red soft glow effect
                    }
                });

                return;
            }

            // Check for COD and amount limit
            if (selectedPaymentMethod.value === 'COD' && amount > 1000) {
                Swal.fire({
                    title: "Warning!",
                    text: "Cash on Delivery is not available for orders above â‚¹1000.",
                    icon: "warning",
                    showConfirmButton: true,
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#ff9800",
                    allowOutsideClick: false, 
                    allowEscapeKey: false, 
                    customClass: {
                        popup: "my-swal-popup",
                        title: "my-swal-title",
                        content: "my-swal-content",
                        confirmButton: "my-swal-btn",
                    },
                    didOpen: () => {
                        const popup = Swal.getPopup();
                        popup.style.borderRadius = "15px"; 
                        popup.style.boxShadow = "0 0 10px rgba(255, 165, 0, 0.3)"; 
                    }
                });
                return;
            }

            try {
                // create the order first
                const formData = new FormData(this)
                const formObject = Object.fromEntries(formData.entries());
                
                formData.forEach((value, key) => {
                console.log(`${key}: ${value}`);
                });
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formObject)
                })

                console.log('response from place-order',response)

                 // If the server responds with a non-OK status (like 400 or 500), handle it:
                if (!response.ok) {
                    const errorData = await response.json();
                    // Optionally show an alert or error message:
                    Swal.fire({
                        title: "Error!",
                        text: errorData.message || "An error occurred.",
                        icon: "error",
                        showConfirmButton: true
                    }).then(() => {
                        // Redirect to the checkout page (or any other page) after showing the error.
                        window.location.href = '/checkout';
                    });
                    return;
                }

                const placeOrderData = await response.json()
                console.log('placeOrderdata',placeOrderData)
                if(!placeOrderData.success) {
                    Swal.fire({
                        title: "Error",
                        text: placeOrderData.message || 'Failed to place the order, please try again',
                        icon: 'error',
                        showConfirmButton: true
                    })
                    return
                }

                // if order created successfully proceed with the payment
                if (placeOrderData.paymentMethod === 'COD') {
                    Swal.fire({
                        title: "Success!",
                        text: "Order placed successfully! Your order will be delivered soon.",
                        icon: "success",
                        showConfirmButton: false,
                        timer: 2600
                    }).then(() => {
                        window.location.href = '/success-page';
                    });
                    return;
                }

                // Create Razorpay order for online payment
                const responseRazorpayOrder = await fetch('/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount })
                });

                console.log('response from create-order',responseRazorpayOrder)

                // Check if the response is not OK
                if (!responseRazorpayOrder.ok) {
                    const errorText = await responseRazorpayOrder.text();
                    console.log('raaerrr',errorText)
                    throw new Error(`Error creating Razorpay order: ${errorText}`);
                }

                const razorpayData = await responseRazorpayOrder.json();
                if (!razorpayData.success) {
                    Swal.fire({
                        title: "Error!",
                        text: "Failed to create Razorpay order. Please try again.",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 2000
                    });
                    return;
                }

                const options = {
                    key: '<%= process.env.RAZORPAY_KEY_ID %>',
                    amount: razorpayData.amount,
                    currency: razorpayData.currency,
                    name: 'Eternal Chapters',
                    description: 'Test Transaction',
                    image: 'http://localhost:3000/img/favicon.png',
                    order_id: razorpayData.order_id,
                    handler: function (response) {
                        Swal.fire({
                            title: "Success!",
                            text: "Payment successful!",
                            icon: "success",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            // update the order status to paid
                            fetch('/update-payment-status', {
                                method: 'POST',
                                headers: { 'Content-Type' : 'application/json'},
                                body: JSON.stringify({
                                    orderId: placeOrderData.order_id,
                                    paymentStatus: 'paid',
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpayOrderId: razorpayData.order_id,
                                    coupon: placeOrderData.coupon,
                                    productId: productId || undefined,
                                })
                            }).then(() => {
                                window.location.href = '/success-page'
                            })
                        });
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    theme: { color: '#3399cc' }
                };

                const rzp1 = new Razorpay(options);
                console.log('rzp1',rzp1)

                // attach a failure event handler
                rzp1.on('payment.failed', async function (response) {
                    console.log('payment failed', response.error)

                    // notify the user about the failed payment
                    Swal.fire({
                        title: 'Payment failed!',
                        text: "Your payment did not go through. Please try again or choose a different payment method.",
                        icon: 'error',
                        showConfirmButton: true,
                    })

                    //update order status to pending
                    try{
                        const updateResponse = await fetch('/update-payment-status', {
                            method: 'POST',
                            headers: { 'Content-Type' : 'application/json'},
                            body: JSON.stringify({
                                orderId: placeOrderData.order_id,
                                paymentStatus: 'failed',
                                paymentError: response.error,
                                coupon: placeOrderData.coupon,
                            })
                        })

                        const updateData = await updateResponse.json()
                        if(!updateData.success) {
                            console.error('Failed to update order status')
                        }
                    }catch (error) {
                        console.error('error updating the payment status', error)
                    }
                })

                // open razorpay modal
                rzp1.open();

            } catch (error) {
                console.log('error placing the order',error)
                Swal.fire({
                    title: "Error!",
                    text: "An error occurred. Please try again.",
                    icon: "error",
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        });

        //apply coupon
        document.getElementById('apply-coupon').addEventListener('click', async function() {
            const retryOrderId = document.getElementById('retry-order-id').value
            const productId = document.getElementById('product-id').value
            const quantity = document.getElementById('quantity').value
            const couponCode = document.getElementById('coupon-code').value;
            const selectedAddress = document.querySelector('input[name="addressId"]:checked');

            if(!couponCode) {
                document.getElementById('coupon-message').innerHTML = "Please enter a coupon code!"
                return
            }

            try {
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: {'Content-type' : 'application/json'},
                    body: JSON.stringify({
                        couponCode,
                        productId: productId || undefined,
                        quantity: quantity || undefined,
                        addressId: selectedAddress ? selectedAddress.value : undefined,
                        retryOrderId: retryOrderId
                    })
                })

                const data = await response.json()

                if(data.success) {

                    let discountMessage = "";
                    if (data.couponType === "fixed") {
                        discountMessage = `Coupon applied! discount: â‚¹${data.discountValue}`;
                    } else if (data.couponType === "percentage") {
                        discountMessage = `Coupon applied! discount: ${data.discountValue}%`;
                    } else {
                        // Fallback message if couponType is not provided
                        discountMessage = `Coupon applied! discount: ${data.discountValue}`;
                    }

                    document.getElementById('coupon-message').innerHTML = discountMessage
                    document.getElementById('coupon-message').className = 'success-message'
                    //update the total amount displayed on the page
                    document.querySelector('.total').innerHTML = `â‚¹${data.formattedTotalAmount}`
                    // document.getElementById('discount-holder').style.display = 'block'
                    document.getElementById('discount').innerHTML = `-â‚¹${data.couponDiscount}`
                    document.getElementById('discount').className = 'dis'

                    document.getElementById('apply-coupon').style.display = 'none'
                    document.getElementById('remove-coupon').style.display = 'inline-block'
                } else {
                    document.getElementById('coupon-message').innerHTML = data.message
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error',
                    text: error.message,
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 2000
                })
            }
        })

        //remove coupon
        document.getElementById('remove-coupon').addEventListener('click' , async function() {
            try {
                const selectedAddress = document.querySelector('input[name="addressId"]:checked');
                const retryOrderId = document.getElementById('retry-order-id').value

                const response = await fetch('/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type' : 'application/json'
                    },
                    body: JSON.stringify({
                        productId: document.getElementById('product-id').value,
                        quantity: document.getElementById('quantity').value,
                        addressId: selectedAddress ? selectedAddress.value : undefined,
                        retryOrderId: retryOrderId
                    })
                })

                const data = await response.json()

                if(data.success) {
                    document.getElementById('coupon-message').innerHTML = ''
                    document.getElementById('coupon-code').value = ''

                    //update the total amount displayed on the page
                    document.querySelector('.total').innerHTML = `â‚¹${data.formattedTotalAmount}`

                    document.getElementById('apply-coupon').style.display = 'inline-block'
                    document.getElementById('remove-coupon').style.display = 'none'
                    // document.getElementById('discount-holder').style.display = 'none'
                    document.getElementById('discount').innerHTML = ''
                }else{
                    document.getElementById('coupon-message').innerHTML = data.message
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error',
                    text: error.message,
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        })
    </script>

    <% if (error && error.length > 0) { %>
        <script>
        Swal.fire({
            title: "Oops! Something went wrong",
            text: "<%= error[0] %>", 
            icon: "error",
            showConfirmButton: true,
            confirmButtonText: "Try Again",
            confirmButtonColor: "#d33", // Red button for errors
            allowOutsideClick: false, // Prevents closing when clicking outside
            allowEscapeKey: false, // Prevents closing with the Escape key
            customClass: {
                popup: "my-swal-popup",
                title: "my-swal-title",
                content: "my-swal-content",
                confirmButton: "my-swal-btn",
            },
            didOpen: () => {
                const popup = Swal.getPopup();
                popup.style.borderRadius = "15px"; // Smooth rounded corners
                popup.style.boxShadow = "0 0 15px rgba(255, 0, 0, 0.3)"; // Soft red glow effect
            }
        });
        </script>
    <% } %>
  
  
    <% if (success && success.length > 0) { %>
        <script>
            Swal.fire({
            icon: "success",
            title: "Success!",
            text: "<%= success[0] %>", // Display the first success message
            showConfirmButton: false,
            timer: 3000, // Auto-close after 2 seconds
            background: "#ffffff", // Standard white background
            color: "#333333", // Dark gray text for readability
            iconColor: "#28a745", // Standard green success icon
            customClass: {
                popup: "my-swal-popup",
                title: "my-swal-title",
                content: "my-swal-content",
            },
            didOpen: () => {
                const popup = Swal.getPopup();
                popup.style.borderRadius = "15px";
                popup.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)"; 
                popup.style.padding = "16px";
            }
            });
        </script>
    <% } %>   
</body>
</html>